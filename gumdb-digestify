#!/usr/bin/env python3
"""Add pyzor digests to all messages with duplicated Message-Id fields."""

import pyzor.digest
import sqlite3
import email
import email.parser
import email.policy

def fetch(cursor):
    while True:
        rows = cursor.fetchmany()
        if not rows: return
        yield from rows

def main():
    conn = sqlite3.connect('/home/rb/var/gumdb.sqlite3', timeout=60)
    # See <https://sqlite.org/foreignkeys.html>.
    if conn.execute('PRAGMA foreign_keys'):
        conn.execute('PRAGMA foreign_keys = ON')
    else:
        # TODO: Proper warning output
        print('WARNING: foreign keys not supported in sqlite3. Database may accumulate cruft.')

    conn.execute('''
        CREATE TABLE IF NOT EXISTS digests (
            id TEXT
                NOT NULL
                PRIMARY KEY
                REFERENCES messages (id)
                ON DELETE CASCADE,
            digest TEXT NOT NULL
        )
    ''')

    conn.execute('''
        CREATE VIEW IF NOT EXISTS duplicates AS
            SELECT id, digest
            FROM (SELECT digest
                  FROM digests
                  GROUP BY digest
                  HAVING count(*) > 1)
            LEFT JOIN digests USING (digest)
    ''')
    conn.execute('''
        CREATE INDEX IF NOT EXISTS digest_digests ON digests (digest)
    ''')
    conn.execute('''
        CREATE INDEX IF NOT EXISTS headers_message_ids ON headers (value) WHERE name = 'message-id'
    ''')
        
    cur = conn.cursor()
    # Find all messages with the same value in their Message-Id
    # header.  DISTINCT is necesssary because there are messages with
    # multiple identical Message-Id headers in my archive!  TODO: A
    # message with two distinct Message-Id headers will be digested
    # twice (with different results) and cause an insertion failure.
    cur.execute('''
        SELECT DISTINCT id, message, headers.value
        FROM (SELECT value
              FROM headers
              WHERE name = 'message-id'
              GROUP BY value
              HAVING count(*) > 1)
        LEFT JOIN headers USING (value)
        JOIN messages USING (id)
        LEFT JOIN digests USING (id)
        WHERE headers.name = 'message-id' AND
              digests.digest IS NULL
    ''')
    parser = email.parser.BytesParser(policy = email.policy.compat32)
    for id, message, message_id in fetch(cur):
        digest = pyzor.digest.DataDigester(parser.parsebytes(message)).digest
        # Pyzor's digest doesn't include the Message-Id.  We want to
        # distinguish identical messages with different Message-Ids,
        # so add that to the digest.
        # TODO: message_id could be None (NULL) if there isn't one
        digest.update(message_id.encode('utf-8'))
        hex = digest.hexdigest()
        print(id, hex)
        conn.execute('INSERT INTO digests (id, digest) VALUES (?, ?)', (id, hex))
        conn.commit()

if __name__ == '__main__':
    main()
