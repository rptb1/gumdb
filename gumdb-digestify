#!/usr/bin/env python3
"""Add pyzor digests to all messages with duplicated Message-Id fields."""

import pyzor.digest
import sqlite3
import email
import email.parser
import email.policy

def fetch(cursor):
    while True:
        rows = cursor.fetchmany()
        if not rows: return
        yield from rows

def main():
    conn = sqlite3.connect('/home/rb/var/gumdb.sqlite3')

    try:
        conn.execute('''
            CREATE TABLE digests (
                id TEXT PRIMARY KEY,
                digest TEXT
            )
        ''')
    except sqlite3.OperationalError:
        pass

    # CREATE INDEX digest_digests ON digests (digest);

    try:
        conn.execute('''
            CREATE VIEW duplicates AS
                SELECT id, digest
                FROM (SELECT digest
                      FROM digests
                      GROUP BY digest
                      HAVING count(*) > 1)
                LEFT JOIN digests USING (digest)
        ''')
    except sqlite3.OperationalError:
        pass
        
    cur = conn.cursor()
    # Find all messages with the same value in their Message-Id header.
    cur.execute('''
        SELECT id, message, source, headers.value
        FROM (SELECT value
              FROM headers
              WHERE name = 'message-id'
              GROUP BY value
              HAVING count(*) > 1)
        LEFT JOIN headers USING (value)
        JOIN messages USING (id)
        LEFT JOIN digests USING (id)
        WHERE headers.name = 'message-id' AND
              digests.digest IS NULL
    ''')
    parser = email.parser.BytesParser(policy = email.policy.compat32)
    for id, message, source, message_id in fetch(cur):
        digest = pyzor.digest.DataDigester(parser.parsebytes(message)).digest
        # Pyzor's digest doesn't include the Message-Id.  We want to
        # distinguish identical messages with different Message-Ids,
        # so add that to the digest.
        digest.update(message_id.encode('utf-8'))
        hex = digest.hexdigest()
        print(id, hex, source)
        conn.execute('INSERT INTO digests (id, digest) VALUES (?, ?)', (id, hex))
        conn.commit()

if __name__ == '__main__':
    main()
